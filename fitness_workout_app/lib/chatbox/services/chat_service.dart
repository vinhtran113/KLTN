import 'dart:convert';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:http/http.dart' as http;
import 'package:fitness_workout_app/chatbox/models/message.dart';

class ChatService {
  static bool isTesting = false;

  static Future<String?> sendMessageToGPT({
    required String userMessage,
    String? imageUrl,
    required String gender,
    required String height,
    required String weight,
    required String bodyFat,
    required List<String> medicalHistory,
    required List<String> medicalHistoryOther,
    required String medicalNote,
    required List<Message> historyMessages,
  }) async {
    print(
        "üìå User info ‚Äî Gender: $gender, Height: $height, Weight: $weight, BodyFat: $bodyFat");

    if (isTesting) {
      await Future.delayed(const Duration(seconds: 1));
      return imageUrl != null
          ? "üí¨ Tr·∫£ l·ªùi gi·∫£ l·∫≠p: B·∫°n n√≥i '$userMessage' k√®m ·∫£nh URL '$imageUrl'. ƒê√¢y l√† ph·∫£n h·ªìi test t·ª´ chatbot."
          : "üí¨ Tr·∫£ l·ªùi gi·∫£ l·∫≠p: B·∫°n n√≥i '$userMessage'. ƒê√¢y l√† ph·∫£n h·ªìi test t·ª´ chatbot.";
    }

    final apiKey = dotenv.env['OPENROUTER_API_KEY'] ?? '';
    if (apiKey.isEmpty) {
      print('‚ùå Thi·∫øu OPENROUTER_API_KEY trong .env');
      return null;
    }

    final url = Uri.parse('https://openrouter.ai/api/v1/chat/completions');
    final headers = {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer $apiKey',
      'HTTP-Referer': 'https://your-app-url.com', // tu·ª≥ ch·ªânh n·∫øu c·∫ßn
      'X-Title': 'FitnessWorkoutApp', // tu·ª≥ ch·ªânh n·∫øu c·∫ßn
    };

    final List<Map<String, dynamic>> chatHistory = [
      {
        'role': 'system',
        'content': '''
B·∫°n l√† m·ªôt b√°c sƒ© chuy√™n khoa s·ª©c kho·∫ª, dinh d∆∞·ª°ng v√† th·ªÉ h√¨nh. 
Th√¥ng tin b·ªánh nh√¢n: 
- Gi·ªõi t√≠nh: $gender
- Chi·ªÅu cao: $height cm
- C√¢n n·∫∑ng: $weight kg
- T·ªâ l·ªá m·ª° c∆° th·ªÉ: $bodyFat%
- Ti·ªÅn s·ª≠ b·ªánh: ${medicalHistory.join(", ")}
- Ti·ªÅn s·ª≠ b·ªánh kh√°c: ${medicalHistoryOther.join(", ")}
- Ghi ch√∫ s·ª©c kho·∫ª: $medicalNote

Y√™u c·∫ßu:
- Ph√¢n t√≠ch t√¨nh tr·∫°ng s·ª©c kho·∫ª, th·ªÉ tr·∫°ng, nguy c∆° b·ªánh l√Ω, ch·∫ø ƒë·ªô t·∫≠p luy·ªán v√† dinh d∆∞·ª°ng d·ª±a tr√™n th√¥ng tin tr√™n v√† n·ªôi dung ng∆∞·ªùi d√πng g·ª≠i (bao g·ªìm c·∫£ h√¨nh ·∫£nh n·∫øu c√≥).
- Ph·∫£n h·ªìi ph·∫£i chi ti·∫øt, khoa h·ªçc, c√≥ th·ªÉ tr√≠ch d·∫´n c√°c nghi√™n c·ª©u ho·∫∑c khuy·∫øn ngh·ªã y khoa n·∫øu ph√π h·ª£p.
- ƒê∆∞a ra nh·∫≠n ƒë·ªãnh t·ªïng quan, c√°c v·∫•n ƒë·ªÅ n·ªïi b·∫≠t, nguy c∆° ti·ªÅm ·∫©n (n·∫øu c√≥), l·ªùi khuy√™n c·ª• th·ªÉ v·ªÅ t·∫≠p luy·ªán, dinh d∆∞·ª°ng, ph√≤ng ng·ª´a b·ªánh.
- VƒÉn phong chuy√™n nghi·ªáp, s√∫c t√≠ch, d·ªÖ hi·ªÉu, gi√∫p b√°c sƒ© n·∫Øm nhanh t√¨nh tr·∫°ng b·ªánh nh√¢n.
- N·∫øu th√¥ng tin ch∆∞a ƒë·ªß ƒë·ªÉ k·∫øt lu·∫≠n, h√£y li·ªát k√™ r√µ nh·ªØng g√¨ c√≤n thi·∫øu v√† ƒë·ªÅ xu·∫•t b·ªï sung.
- Tr·∫£ l·ªùi t·ªëi ƒëa 7 c√¢u, tr√°nh lan man, t·∫≠p trung v√†o c√°c ƒëi·ªÉm ch√≠nh.
'''
      },
      ...historyMessages.map((msg) => {
            'role': msg.isUser ? 'user' : 'assistant',
            'content': msg.text,
          }),
    ];

    final userContent = [];

    if (userMessage.trim().isNotEmpty) {
      userContent.add({'type': 'text', 'text': userMessage});
    }

    if (imageUrl != null && imageUrl.trim().isNotEmpty) {
      userContent.add({
        'type': 'image_url',
        'image_url': {'url': imageUrl}
      });
    }

    chatHistory.add({
      'role': 'user',
      'content': userContent,
    });

    final body = jsonEncode({
      'model': 'openai/gpt-4o-mini',
      'max_tokens': 1000,
      'messages': chatHistory,
    });

    try {
      final response = await http.post(url, headers: headers, body: body);
      if (response.statusCode == 200) {
        final json = jsonDecode(response.body);
        return json['choices'][0]['message']['content'];
      } else {
        print('‚ùå L·ªói GPT API: ${response.body}');
        return null;
      }
    } catch (e) {
      print('‚ùå Exception GPT: $e');
      return null;
    }
  }
}
