import 'dart:convert';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:http/http.dart' as http;

class ChatService {
  // B·∫≠t ch·∫ø ƒë·ªô test = true ‚Üí ch·ªâ tr·∫£ l·ªùi gi·∫£ l·∫≠p, kh√¥ng g·ªçi GPT th·∫≠t
  static const bool isTesting = true;

  // G·ª≠i tin nh·∫Øn d·∫°ng vƒÉn b·∫£n
  static Future<String?> sendMessageToGPT({
    required String userMessage,
    required String gender,
    required String height,
    required String weight,
  }) async {
    if (isTesting) {
      await Future.delayed(const Duration(seconds: 1)); // gi·∫£ l·∫≠p th·ªùi gian ph·∫£n h·ªìi
      return "üí¨ Tr·∫£ l·ªùi gi·∫£ l·∫≠p: B·∫°n n√≥i '$userMessage'. ƒê√¢y l√† ph·∫£n h·ªìi test t·ª´ chatbot.";
    }

    final apiKey = dotenv.env['OPENAI_API_KEY'] ?? '';
    if (apiKey.isEmpty) {
      print('‚ùå Thi·∫øu OPENAI_API_KEY trong .env');
      return null;
    }

    final url = Uri.parse('https://api.openai.com/v1/chat/completions');
    final headers = {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer $apiKey',
    };

    final body = jsonEncode({
      'model': 'gpt-4o',
      'messages': [
        {
          'role': 'system',
          'content': 'B·∫°n l√† m·ªôt hu·∫•n luy·ªán vi√™n th·ªÉ h√¨nh. Ng∆∞·ªùi d√πng hi·ªán t·∫°i c√≥ gi·ªõi t√≠nh l√† $gender, chi·ªÅu cao $height cm, c√¢n n·∫∑ng $weight kg. '
              'Ch·ªâ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn s·ª©c kh·ªèe, th·ªÉ h√¨nh, ch·∫ø ƒë·ªô t·∫≠p luy·ªán, ƒÉn u·ªëng. N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan, h√£y t·ª´ ch·ªëi tr·∫£ l·ªùi m·ªôt c√°ch l·ªãch s·ª±.'
        },
        {'role': 'user', 'content': userMessage}
      ],
    });

    try {
      final response = await http.post(url, headers: headers, body: body);
      if (response.statusCode == 200) {
        final json = jsonDecode(response.body);
        return json['choices'][0]['message']['content'];
      } else {
        print('‚ùå L·ªói GPT API: ${response.body}');
        return null;
      }
    } catch (e) {
      print('‚ùå Exception GPT: $e');
      return null;
    }
  }

  // G·ª≠i tin nh·∫Øn d·∫°ng ·∫£nh
  static Future<String?> sendImageMessageToGPT({
    required String imageUrl,
    required String gender,
    required String height,
    required String weight,
  }) async {
    if (isTesting) {
      await Future.delayed(const Duration(seconds: 1)); // gi·∫£ l·∫≠p th·ªùi gian ph·∫£n h·ªìi
      return "üí¨ Tr·∫£ l·ªùi gi·∫£ l·∫≠p: B·∫°n ƒë√£ g·ª≠i ·∫£nh c√≥ URL l√† '$imageUrl'. ƒê√¢y l√† ph·∫£n h·ªìi test t·ª´ chatbot.";
    }

    final apiKey = dotenv.env['OPENAI_API_KEY'] ?? '';
    if (apiKey.isEmpty) {
      print('‚ùå Thi·∫øu OPENAI_API_KEY trong .env');
      return null;
    }

    final url = Uri.parse('https://api.openai.com/v1/chat/completions');
    final headers = {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer $apiKey',
    };

    final body = jsonEncode({
      'model': 'gpt-4o',
      'messages': [
        {
          'role': 'system',
          'content': 'B·∫°n l√† m·ªôt hu·∫•n luy·ªán vi√™n th·ªÉ h√¨nh. Ng∆∞·ªùi d√πng hi·ªán t·∫°i c√≥ gi·ªõi t√≠nh l√† $gender, chi·ªÅu cao $height cm, c√¢n n·∫∑ng $weight kg. '
              'Ng∆∞·ªùi d√πng v·ª´a g·ª≠i m·ªôt h√¨nh ·∫£nh t·∫°i URL: $imageUrl. Ch·ªâ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn s·ª©c kh·ªèe, th·ªÉ h√¨nh, ch·∫ø ƒë·ªô t·∫≠p luy·ªán, ƒÉn u·ªëng.'
        },
      ],
    });

    try {
      final response = await http.post(url, headers: headers, body: body);
      if (response.statusCode == 200) {
        final json = jsonDecode(response.body);
        return json['choices'][0]['message']['content'];
      } else {
        print('‚ùå L·ªói GPT API: ${response.body}');
        return null;
      }
    } catch (e) {
      print('‚ùå Exception GPT: $e');
      return null;
    }
  }
}
